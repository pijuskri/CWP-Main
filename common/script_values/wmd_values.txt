nuclear_stockpile_sv = {
	value = var:nuclear_stockpile
	round = yes
}

nuclear_stockpile_max = {
	value = 0
	every_scope_state = {
		limit = {
			has_building = building_nuclear_weapons_facility
		}
		add = {
			value = b:building_nuclear_weapons_facility.level
			multiply = 2
			desc = BASE_NUCLEAR_SILO
			format = "NUCLEAR_SILO_TOOLTIP_FORMAT"
		}
	}
}

nuclear_deployment_percentage_sv = {
	value = var:nuclear_deployment_percentage
	divide = 100
}

nuclear_stockpile_max_left = {
	value = nuclear_stockpile_max
	subtract = nuclear_stockpile_sv
}

nuclear_stockpile_growth = {
	value = 0
	every_scope_state = {
		limit = {
			has_building = building_nuclear_weapons_facility
		}
		if = {
			limit = {
				is_production_method_active = {
					building_type = building_nuclear_weapons_facility
					production_method = pm_atomic_warhead_prod
				}
				any_scope_building = {
					is_building_type = building_nuclear_weapons_facility
					building_has_goods_shortage = no
				}
			}
			add = {
				value = b:building_nuclear_weapons_facility.level
				desc = ATOMIC_WARHEAD_PROD
				format = "NUCLEAR_PROD_TOOLTIP_FORMAT"
			}
		}
		if = {
			limit = {
				is_production_method_active = {
					building_type = building_nuclear_weapons_facility
					production_method = pm_thermonuclear_warhead_prod
				}
				any_scope_building = {
					is_building_type = building_nuclear_weapons_facility
					building_has_goods_shortage = no
				}
			}
			add = {
				value = b:building_nuclear_weapons_facility.level
				multiply = 2
				desc = THERMONUCLEAR_WARHEAD_PROD
				format = "NUCLEAR_PROD_TOOLTIP_FORMAT"
			}
		}
	}
	divide = 3
	max = nuclear_stockpile_max_left
	min = 0
}
nuclear_stockpile_decay = {
	value = 0
	every_scope_state = {
		limit = {
			has_building = building_nuclear_weapons_facility
		}
		if = {
			limit = {
				is_production_method_active = {
					building_type = building_nuclear_weapons_facility
					production_method = pm_no_nuclear_production
				}
			}
			subtract = b:building_nuclear_weapons_facility.level
		}
		if = {
			limit = {
				any_scope_building = {
					is_building_type = building_nuclear_weapons_facility
					building_has_goods_shortage = yes
				}
			}
			subtract = b:building_nuclear_weapons_facility.level
			
		}
		divide = 3
	}
	if = {
		limit = {
			nuclear_stockpile_sv > nuclear_stockpile_max
		}
		subtract = {
			value = nuclear_stockpile_sv
			divide = nuclear_stockpile_max
		}
	}
}

nuclear_stockpile_sum = {
	value = 0
	add = {
		value = nuclear_stockpile_growth
		desc = ATOMIC_WARHEAD_PROD
		format = "NUCLEAR_PROD_TOOLTIP_FORMAT"
	}
	add = {
		value = nuclear_stockpile_decay
		desc = ATOMIC_WARHEAD_PROD
		format = "NUCLEAR_PROD_TOOLTIP_FORMAT"
	}
	format = "NUCLEAR_PROD_TOOLTIP_FORMAT"
}

nuclear_strike_values = {
	value = nuclear_warhead_yield
	multiply = nuclear_stockpile_sv
}

nuclear_warhead_yield = {
	value = var:nuclear_yield
}

nuclear_strike_state_size = {
	value = arable_land
}

nuclear_strike_population_kill = {
	value = nuclear_strike_effectiveness_state
	divide = 2500
	if = {
		limit = {
			scope:initiator = {
				has_variable = air_burst_focus
			}
		}
		multiply = 1.5
	}
	if = {
		limit = {
			scope:initiator = {
				has_variable = ground_burst_focus
			}
		}
		multiply = 0.5
	}
	max = 0.9
}

nuclear_strike_estimated_casualties = {
	value = state_population
	multiply = nuclear_strike_population_kill
}

nuclear_strike_devastation = {
	value = nuclear_strike_effectiveness_state
	if = {
		limit = {
			scope:initiator = {
				has_variable = ground_burst_focus
			}
		}
		divide = 2
	}
}

nuclear_strike_radiation = {
	value = nuclear_strike_effectiveness_state
	divide = 10
	if = {
		limit = {
			scope:initiator = {
				has_variable = air_burst_focus
			}
		}
		divide = 2
	}
}

nuclear_strike_radiation_time = {
	value = nuclear_strike_effectiveness_state
	divide = 10
}

nuclear_wmd_target_list_size = {
	every_in_list = {
		variable = wmd_target_list
		add = 1
	}
	min = 1
}

nuclear_strike_effectiveness_total = {
	value = {
		value = nuclear_strike_values
		multiply = nuclear_deployment_percentage_sv
		desc = NUCLEAR_ATTACK_POWER
		format = "NUCLEAR_ATTACK_FORMAT"
	}
	divide = {
		every_in_list = {
			variable = wmd_target_list
			add = 1
		}
		min = 1
		desc = NUCLEAR_TARGET_LIST
		format = "NUCLEAR_ATTACK_FORMAT"
	}
	min = 0
}

nuclear_strike_effectiveness_state = {
	value = {
		value = scope:initiator.nuclear_strike_effectiveness_total
		desc = GLOBAL_NUCLEAR_STRIKE_EFFECTIVENESS
		format = "NUCLEAR_ATTACK_FORMAT"
	}
	multiply = {
		value = nuclear_strike_state_size_urbanization
		desc = STATE_URBANIZATION_PERCENT
		format = "NUCLEAR_ATTACK_FORMAT"
	}
}

nuclear_strike_state_size_urbanization = {
	value = total_urbanization
	divide = {
		value = nuclear_strike_state_size
		min = 1
	}
	divide = 100
	min = 1
}

nuclear_strike_strategic_region_coverage = {
	value = 0
	if = {
		limit = {
			any_scope_state = {
				owner = scope:initiator
				has_building = building_strategic_airbase
			}
		}
		add = {
			value = scope:initiator.strategic_airbase_size_national
			divide = 20
			desc = HAS_STRATEGIC_AIRBASE_IN_REGION
			format = "NUCLEAR_COVERAGE_FORMAT"
		}
	}
	if = {
		limit = {
			not = {
				any_scope_state = {
					owner = scope:initiator
					has_building = building_strategic_airbase
				}
			}
		}
		add = {
			value = scope:initiator.strategic_airbase_size_national
			divide = 100
			max = 0.3
			desc = NATIONAL_STRATEGIC_AIRBASE_LEVEL
			format = "NUCLEAR_COVERAGE_FORMAT"
		}
	}
	if = {
		limit = {
			any_neighbouring_state = {
				has_building = building_strategic_airbase	
			}
		}
		multiply = {
			value = 1.5
			desc = NEIGHBORING_STRATEGIC_REGION_AIRBASE
			format = "NUCLEAR_COVERAGE_FORMAT"
		}
	}
	if = {
		limit = {
			any_neighbouring_state = {
				any_neighbouring_state = {
					owner = {
						has_variable = deployed_nuclear_bombs
						var:deployed_nuclear_bombs = scope:initiator
					}
				}
			}
		}
		multiply = {
			value = 5
			desc = DEPLOYED_NUKE_IN_NEIGHBORING_REGION
			format = "NUCLEAR_COVERAGE_FORMAT"
		}
	}

	max = 1
}

nuclear_strike_global_coverage_avg = {
	scope:initiator = {
		every_in_list = {
			variable = strategic_regions
			add = nuclear_strike_strategic_region_coverage
		}
		divide = {
			every_in_list = {
				variable = strategic_regions
				add = 1
			}
			min = 1
		}
	}
}

nuclear_strike_delivery_effectiveness = {
	value = {
		value = THIS.region.nuclear_strike_strategic_region_coverage
		desc = NUCLEAR_STRIKE_STRATEGIC_REGION_COVERAGE
		format = "NUCLEAR_COVERAGE_FORMAT"
	}
	if = {
		limit = {
			THIS = {
				or = {
					is_coastal = yes
					any_neighbouring_state = { # Rework to account for aircraft carrier pm
						is_sea_adjacent = yes
					}
				}

			}
		}
		add = {
			value = scope:initiator.navy_size_national
			divide = 300
			max = 70
			desc = NUCLEAR_STRIKE_NAVY_REACH
			format = "NUCLEAR_COVERAGE_FORMAT"
		}
	}
	if = {
		limit = {
			scope:initiator = {
				has_strategic_adjacency = THIS
			}
		}
		multiply = {
			value = 1.5
			desc = NUCLEAR_STRIKE_STRATEGIC_ADJACENCY
			format = "NUCLEAR_COVERAGE_FORMAT"
		}
	}
	multiply = 100
}

nuclear_strike_delivery_effectiveness_negate = {
	value = 100
	subtract = nuclear_strike_delivery_effectiveness
	min = 0
}

nuclear_weapons_facility_size_national = {
	every_scope_state = {
		if = {
			limit = {
				has_building = building_nuclear_weapons_facility
				any_scope_building = {
					is_building_type = building_nuclear_weapons_facility
					building_has_goods_shortage = no
				}
			}
			add = {
				value = b:building_nuclear_weapons_facility.level
			}
		}
	}
}

strategic_airbase_size_national = {
	every_scope_state = {
		if = {
			limit = {
				has_building = building_strategic_airbase
				any_scope_building = {
					is_building_type = building_strategic_airbase
					building_has_goods_shortage = no
				}
			}
			add = {
				value = b:building_strategic_airbase.level
			}
			if = {
				limit = {
					b:building_strategic_airbase = {
						has_active_production_method = pm_reinforced_strategic_airbase
					}
				}
				multiply = 1.3
			}
		}
	}
}

missile_silo_size_national = {
	every_scope_state = {
		if = {
			limit = {
				has_building = building_nuclear_weapons_silo
				any_scope_building = {
					is_building_type = building_nuclear_weapons_silo
					building_has_goods_shortage = no
				}
			}
			add = {
				value = b:building_nuclear_weapons_silo.level
			}
		}
	}
}

navy_size_national = {
	every_scope_state = {
		if = {
			limit = {
				has_building = building_naval_base
				any_scope_building = {
					is_building_type = building_naval_base
					building_has_goods_shortage = no
				}
			}
			add = {
				value = b:building_naval_base.level # Rework when 1.5 hits and navy can have aircraft carriers
			}
		}
	}	
}

nuclear_research_facility_effects = {
	every_scope_state = {
		limit = {
			has_building = building_nuclear_research_facility
		}
		if = {
			limit = {
				is_production_method_active = {
					building_type = building_nuclear_research_facility
					production_method = pm_nuclear_fission_testing
				}
			}
			add = 0.05
		}
		if = {
			limit = {
				is_production_method_active = {
					building_type = building_nuclear_research_facility
					production_method = pm_nuclear_warhead_testing
				}
			}
			add = 0.10
		}
	}
}

nuclear_progress_increase_per_month = {
	if = {
		limit = {
			var:nuclear_program_progress < 80
		}
		value = {
			value = nuclear_research_facility_effects
			desc = nuclear_progress_research_facility_value
			format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
		}
		if = {
			limit = {
				has_modifier = german_scientists
			}
			add = {
				value = 0.5
				desc = german_scientists
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = nuclear_fission
			}
			add = {
				value = 0.25
				desc = tech_nuclear_fission
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = nuclear_reactors
			}
			add = {
				value = 0.25
				desc = tech_nuclear_reactors
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = calutron
			}
			add = {
				value = 0.25
				desc = tech_calutron
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = atomic_bomb
			}
			add = {
				value = 0.25
				desc = tech_atomic_bomb
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = thermonuclear_bomb
			}
			add = {
				value = 0.25
				desc = tech_thermonuclear_bomb
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = nuclear_warfare
			}
			add = {
				value = 0.25
				desc = tech_nuclear_warfare
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = mutually_assured_destruction
			}
			add = {
				value = 0.25
				desc = tech_mutually_assured_destruction
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = massive_retaliation_doctrine
			}
			add = {
				value = 0.25
				desc = tech_massive_retaliation_doctrine
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = minimal_deterrence
			}
			add = {
				value = 0.25
				desc = tech_minimal_deterrence
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = decapitation_strike
			}
			add = {
				value = 0.25
				desc = tech_decapitation_strike
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = counterforce
			}
			add = {
				value = 0.25
				desc = tech_counterforce
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = countervalue
			}
			add = {
				value = 0.25
				desc = tech_countervalue
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = intercontinental_ballistic_missiles
			}
			add = {
				value = 0.25
				desc = tech_icbm
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				owner = {
					market = {
						mg:refined_uranium = {
							market_goods_pricier >= 0.5
						}
					}
				}
			}
			subtract = {
				value = 0.5
				desc = expensive_uranium
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_variable = nuclear_program_paused
			}
			value = {
				value = 0
				desc = nuclear_program_paused
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
	}

}

nuclear_progress_icbm_increase_per_month = {
	if = {
		limit = {
			var:nuclear_program_progress < 80
		}
		value = {
			value = nuclear_research_facility_effects
			desc = nuclear_progress_research_facility_value
			format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
		}
		if = {
			limit = {
				has_modifier = german_scientists
			}
			add = {
				value = 0.5
				desc = german_scientists
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = atomic_bomb
			}
			add = {
				value = 0.25
				desc = tech_atomic_bomb
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = thermonuclear_bomb
			}
			add = {
				value = 0.25
				desc = tech_thermonuclear_bomb
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = rockets
			}
			add = {
				value = 0.25
				desc = tech_rockets
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = early_guided_missiles
			}
			add = {
				value = 0.25
				desc = tech_early_guided_missiles
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = guidance_systems
			}
			add = {
				value = 0.25
				desc = tech_guidance_systems
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = nuclear_warfare
			}
			add = {
				value = 0.25
				desc = tech_nuclear_warfare
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = mutually_assured_destruction
			}
			add = {
				value = 0.25
				desc = tech_mutually_assured_destruction
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = massive_retaliation_doctrine
			}
			add = {
				value = 0.25
				desc = tech_massive_retaliation_doctrine
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = minimal_deterrence
			}
			add = {
				value = 0.25
				desc = tech_minimal_deterrence
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = decapitation_strike
			}
			add = {
				value = 0.25
				desc = tech_decapitation_strike
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = counterforce
			}
			add = {
				value = 0.25
				desc = tech_counterforce
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = countervalue
			}
			add = {
				value = 0.25
				desc = tech_countervalue
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = intercontinental_ballistic_missiles
			}
			add = {
				value = 0.25
				desc = tech_icbm
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = internal_guidance_systems
			}
			add = {
				value = 0.25
				desc = tech_internal_guidance_systems
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = infrared_tracking
			}
			add = {
				value = 0.25
				desc = tech_infrared_tracking
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = infrared_missiles
			}
			add = {
				value = 0.25
				desc = tech_infrared_missiles
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_technology_researched = beam_riding_weapons
			}
			add = {
				value = 0.25
				desc = tech_beam_riding_weapons
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				owner = {
					market = {
						mg:refined_uranium = {
							market_goods_pricier >= 0.5
						}
					}
				}
			}
			subtract = {
				value = 0.5
				desc = expensive_uranium
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
		if = {
			limit = {
				has_variable = nuclear_program_paused
			}
			value = {
				value = 0
				desc = nuclear_program_paused
				format = "NUCLEAR_PROGRESS_INCREASE_FORMAT"
			}
		}
	}
}

nuclear_test_success_chance = {
	if = { limit = { has_modifier = german_scientists } add = 20 }
	if = { limit = { has_technology_researched = nuclear_fission } add = 10 }
	if = { limit = { has_technology_researched = nuclear_reactors } add = 10 }
	if = { limit = { has_technology_researched = calutron } add = 10 }
	if = { limit = { has_technology_researched = atomic_bomb } add = 10 }
	if = { limit = { has_technology_researched = thermonuclear_bomb } add = 10 }
	if = { limit = { has_technology_researched = nuclear_warfare } add = 10 }
	if = { limit = { has_technology_researched = mutually_assured_destruction } add = 10 }
	if = { limit = { has_technology_researched = massive_retaliation_doctrine } add = 10 }
	if = { limit = { has_technology_researched = minimal_deterrence } add = 10 }
	if = { limit = { has_technology_researched = decapitation_strike } add = 10 }
	if = { limit = { has_technology_researched = counterforce } add = 10 }
	if = { limit = { has_technology_researched = countervalue } add = 10 }
}

nuclear_test_success_chance_icbm = {
	if = { limit = { has_modifier = german_scientists } add = 10 }
	if = { limit = { has_technology_researched = atomic_bomb } add = 10 }
	if = { limit = { has_technology_researched = thermonuclear_bomb } add = 10 }
	if = { limit = { has_technology_researched = rockets } add = 10 }
	if = { limit = { has_technology_researched = early_guided_missiles } add = 10 }
	if = { limit = { has_technology_researched = guidance_systems } add = 10 }
	if = { limit = { has_technology_researched = nuclear_warfare } add = 10 }
	if = { limit = { has_technology_researched = mutually_assured_destruction } add = 10 }
	if = { limit = { has_technology_researched = massive_retaliation_doctrine } add = 10 }
	if = { limit = { has_technology_researched = minimal_deterrence } add = 10 }
	if = { limit = { has_technology_researched = decapitation_strike } add = 10 }
	if = { limit = { has_technology_researched = counterforce } add = 10 }
	if = { limit = { has_technology_researched = countervalue } add = 10 }
	if = { limit = { has_technology_researched = intercontinental_ballistic_missiles } add = 10 }
	if = { limit = { has_technology_researched = internal_guidance_systems } add = 10 }
	if = { limit = { has_technology_researched = infrared_tracking } add = 10 }
	if = { limit = { has_technology_researched = infrared_missiles } add = 10 }
	if = { limit = { has_technology_researched = beam_riding_weapons } add = 10 }
}
nuclear_test_fail_chance_icbm = {
	value = 110
	subtract = nuclear_test_success_chance_icbm
}
nuclear_test_fail_chance = {
	value = 110
	subtract = nuclear_test_success_chance
}

nuclear_test_sites_viable = {
	value = {
		every_state = {
			limit = {
				owner = root
			}
			add = 1
		}
	}
}

nuclear_test_sites_bottom1 = {
	value = nuclear_test_sites_viable
	subtract = 1
}

nuclear_test_sites_bottom2 = {
	value = nuclear_test_sites_viable
	subtract = 2
}

nuclear_test_sites_bottom3 = {
	value = nuclear_test_sites_viable
	subtract = 3
}

wmd_target_list_size = {
	every_in_list = {
		variable = wmd_target_list
		add = 1
	}
}

wmd_target_list_slots_left = {
	value = nuclear_stockpile_sv
	subtract = wmd_target_list_size
}

wmd_target_list_states_count_per_country = {
	every_in_list = {
		variable = wmd_target_list
		limit = {
			owner = scope:target
		}
		add = 1
	}
}

wmd_target_list_states_population_per_country = {
	every_in_list = {
		variable = wmd_target_list
		limit = {
			owner = scope:target
		}
		add = state_population
	}
}

wmd_target_list_states_estimated_casualties_per_country = {
	scope:initiator = {
		every_in_list = {
			variable = wmd_target_list
			limit = {
				owner = ROOT
			}
			add = nuclear_strike_estimated_casualties
		}
	}
}

wmd_target_list_states_estimated_casualties_total = {
	scope:initiator = {
		every_in_list = {
			variable = wmd_target_list
			add = nuclear_strike_estimated_casualties
		}
	}
}

wmd_target_list_states_delivery_effectiveness_total = {
	scope:initiator = {
		every_in_list = {
			variable = wmd_target_list
			add = nuclear_strike_delivery_effectiveness
		}
		divide = {
			every_in_list = {
				variable = wmd_target_list
				add = 1
			}
		}
	}
}